{"version":3,"file":"static/webpack/static/development/pages/client.js.1ef52395fc2171e2cd6e.hot-update.js","sources":["webpack:///./components/ReviewMessage.js","webpack:///./components/Timer.js"],"sourcesContent":["import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport gql from 'graphql-tag'\nimport { Query, Mutation } from 'react-apollo'\nimport DaySelector from './DaySelector'\nimport { format } from 'date-fns'\nimport Timer from './Timer'\nimport Submitted from './Submitted'\nimport { SINGLE_CLIENT_QUERY } from './Clients'\nimport { ALL_CLIENTS_REMINDERS } from './SingleClient'\nimport User from './User'\nimport Error from './ErrorMessage'\nimport { ALL_CARTITEMS_QUERY } from './Slider'\n\nconst SEND_TEXT_MUTATION = gql`\n  mutation SEND_TEXT_MUTATION(\n    $to: String!\n    $text: String!\n    $client: ID!\n    $confirmationStatus: String!\n    $forDate: String!\n  ) {\n    createTextReminder(\n      to: $to\n      text: $text\n      client: $client\n      confirmationStatus: $confirmationStatus\n      forDate: $forDate\n    ) {\n      confirmationStatus\n      id\n      text\n      forDate\n      user {\n        id\n      }\n      client {\n        id\n      }\n    }\n  }\n`\n\nconst TEXT_TEMPLATES_QUERY = gql`\n  query TEXT_TEMPLATES_QUERY {\n    textTemplates {\n      id\n      name\n      content\n    }\n  }\n`\n\nconst Form = styled.form`\n  display: grid;\n  grid-template-columns: 280px 10px 1fr 100px;\n  grid-template-rows: 70px 1fr;\n  align-items: flex-end;\n  width: 100%;\n  height: 100%;\n  padding: 20px 20px;\n  z-index: 5;\n  border-radius: 20px;\n  border: 5px solid white;\n  box-shadow: 1px 0 4px 2px rgba(0, 0, 0, 0.1);\n  background-color: rgba(240, 240, 240, 1);\n`\n\nconst CharCount = styled.p`\n  font-size: 11px;\n  grid-column: 3;\n  grid-row: 2;\n  justify-self: flex-end;\n  margin: 2px 0;\n  z-index: 100;\n`\n\nconst Message = styled.textarea`\n  grid-column: 3;\n  grid-row: 2;\n  position: relative;\n  z-index: 6;\n  margin: 0 10px;\n  font-family: 'Montserrat', sans-serif;\n  color: rgba(20, 20, 20, 0.7);\n  width: 100%;\n  min-width: 250px;\n  padding: 10px;\n  height: 100%;\n  line-height: 22px;\n  max-height: 140px;\n  border-radius: 10px;\n  font-size: 1.5rem;\n  resize: none;\n  border: none;\n  background: rgba(250, 250, 250, 1);\n  box-shadow: 0 0 4px 3px rgba(0, 0, 0, 0.05);\n  &:focus {\n    outline: none;\n  }\n`\n\nconst Send = styled.button`\n  background: rgba(30, 110, 240, 1);\n  color: white;\n  font-weight: 800;\n  border: none;\n  width: 75px;\n  font-size: 2rem;\n  grid-column: 4;\n  grid-row: 2;\n  justify-self: flex-end;\n  height: 35px;\n  font-size: 1.8rem;\n  border-radius: 5px;\n  outline: none;\n  cursor: pointer;\n  transition: 0.1s;\n  box-shadow: 0 0 5px 3px rgba(0, 0, 0, 0.1);\n  &:active {\n    box-shadow: none;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n  }\n  &:hover {\n    transform: scale(1.1);\n  }\n`\n\nconst MessageBody = props => (\n  <User>\n    {({ data: { me } }) => {\n      const business = me.businessName.toString()\n      const phone = me.cellPhone.toString()\n      return (\n        <Query query={SINGLE_CLIENT_QUERY} variables={{ id: props.id }}>\n          {({ loading, error, data: { client } }) => {\n            if (loading) return <p>Loading...</p>\n            if (error) return <Error error={error} />\n            if (!client) return null\n            return (\n              <Query query={TEXT_TEMPLATES_QUERY}>\n                {({ data }) => {\n                  const seed = data.textTemplates[0].content\n                    .replace('<business>', business)\n                    .replace('<phone>', phone)\n                  return (\n                    <ReviewMessage\n                      client={client.id}\n                      seededMessage={seed}\n                      cellPhone={client.cellPhone}\n                    />\n                  )\n                }}\n              </Query>\n            )\n          }}\n        </Query>\n      )\n    }}\n  </User>\n)\n\nclass ReviewMessage extends Component {\n  state = {\n    time: '8:00 am',\n    text: this.props.seededMessage,\n    date: '',\n  }\n\n  saveToState = e => {\n    const { name, type, value } = e.target\n    const val = type === 'number' ? parseFloat(value) : value\n    if (name === 'date') {\n      this.setState({ date: val })\n    }\n    if (name === 'time') {\n      this.setState({ time: val })\n    }\n    let date = format(val, 'ddd, MMM Do')\n    let time = this.state.time\n    const textTemplate = this.props.seededMessage\n      .replace('<date>', date)\n      .replace('<time>', time)\n    this.setState({ text: textTemplate })\n  }\n\n  render() {\n    const tooLong = this.state.text.length > 159\n    const needsDate = this.state.date.length < 2\n    const needsTime = this.state.time.length < 2\n\n    return (\n      <Mutation\n        mutation={SEND_TEXT_MUTATION}\n        variables={{\n          to: this.props.cellPhone.toString(),\n          text: this.state.text,\n          client: this.props.client,\n          confirmationStatus: 'UNCONFIRMED',\n          forDate: this.state.date,\n        }}\n        refetchQueries={[\n          {\n            query: ALL_CLIENTS_REMINDERS,\n            variables: { client: this.props.client },\n          },\n          {\n            query: ALL_CARTITEMS_QUERY,\n          },\n        ]}\n      >\n        {(createTextReminder, { error, loading, called }) => {\n          // if (loading) return <p>Loading...</p>\n          if (error) return <Error error={error} />\n\n          return (\n            <Form\n              onSubmit={async e => {\n                e.preventDefault()\n                const res = await createTextReminder()\n                console.log(res)\n              }}\n            >\n              {!loading && !error && called && <Submitted />}\n\n              <>\n                <DaySelector saveToState={this.saveToState} />\n\n                <Message\n                  readOnly\n                  name=\"text\"\n                  value={this.state.text}\n                  onChange={this.saveToState}\n                />\n                <CharCount>{this.state.text.length} of 160</CharCount>\n\n                <Send\n                  disabled={loading || tooLong || needsDate || needsTime}\n                  aria-busy={loading}\n                  type=\"submit\"\n                >\n                  Send\n                </Send>\n              </>\n            </Form>\n          )\n        }}\n      </Mutation>\n    )\n  }\n}\nexport default MessageBody\nexport { TEXT_TEMPLATES_QUERY, SEND_TEXT_MUTATION }\n","import React from 'react'\nimport Select from 'react-select'\nimport chroma from 'chroma-js'\nimport styled from 'styled-components'\n\nconst colourOptions = [\n  { value: '1', label: '1', color: '#00B8D9' },\n  { value: '2', label: '2', color: '#0052CC' },\n  { value: '3', label: '3', color: '#5243AA' },\n  { value: '4', label: '4', color: '#FF5630' },\n  { value: '5', label: '5', color: '#FF8B00' },\n  { value: '6', label: '6', color: '#FFC400' },\n  { value: '7', label: '7', color: '#36B37E' },\n  { value: '8', label: '8', color: '#00875A' },\n  { value: '9', label: '9', color: '#253858' },\n  { value: '10', label: '10', color: '#666666' },\n  { value: '11', label: '11', color: '#666666' },\n  { value: '12', label: '12', color: '#666666' },\n]\nconst dot = (color = '#ccc') => ({\n  alignItems: 'center',\n  display: 'flex',\n\n  ':before': {\n    backgroundColor: color,\n    borderRadius: 10,\n    content: '\" \"',\n    display: 'block',\n    marginRight: 8,\n    height: 10,\n    width: 10,\n  },\n})\nconst colourStyles = {\n  control: styles => ({ ...styles, backgroundColor: 'white' }),\n  option: (styles, { data, isDisabled, isFocused, isSelected }) => {\n    const color = chroma(data.color)\n    return {\n      ...styles,\n      backgroundColor: isDisabled\n        ? null\n        : isSelected\n        ? data.color\n        : isFocused\n        ? color.alpha(0.1).css()\n        : null,\n      color: isDisabled\n        ? '#ccc'\n        : isSelected\n        ? chroma.contrast(color, 'white') > 2\n          ? 'white'\n          : 'black'\n        : data.color,\n    }\n  },\n  input: styles => ({ ...styles, ...dot() }),\n  placeholder: styles => ({ ...styles, ...dot() }),\n  singleValue: (styles, { data }) => ({ ...styles, ...dot(data.color) }),\n}\nclass Timer extends React.Component {\n  state = {\n    hour: '8',\n    minute: '00',\n    am: true,\n  }\n\n  handleTime = (hour, minute, am) => {\n    this.setState({ hour, minute, am })\n  }\n  render() {\n    const { time } = this.state\n\n    return (\n      <Select\n        className=\"color\"\n        styles={colourStyles}\n        value={hour}\n        onChange={this.handleTime}\n        options={colourOptions}\n      />\n    )\n  }\n}\nexport default Timer\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AA6BA;AAUA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAyBA;AAAA;AAAA;AAAA;AACA;AA4BA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAGA;AAGA;AA9BA;AACA;AAiCA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;;;;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AACA;AAAA;AAAA;AAFA;AAKA;AADA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAGA;;;;AAvFA;AACA;AAwFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9PA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAJA;AAAA;AACA;AAaA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAOA;AATA;AAiBA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAxBA;AACA;AAyBA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;AAtBA;AACA;AAuBA;;;;A","sourceRoot":""}