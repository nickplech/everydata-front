{"version":3,"file":"static/webpack/static/development/pages/client.js.8288d5c36932d5381c41.hot-update.js","sources":["webpack:///./components/ImageInput.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst readFileAsDataURL = file =>\n  new Promise(resolve => {\n    const reader = new FileReader()\n\n    reader.onload = event => {\n      resolve(event.target.result)\n    }\n\n    reader.readAsDataURL(file)\n  })\n\nconst resizeImage = (imageURL, canvas, maxHeight) =>\n  new Promise(resolve => {\n    const image = new Image()\n\n    image.onload = () => {\n      const context = canvas.getContext('2d')\n\n      if (image.height > maxHeight) {\n        image.width *= maxHeight / image.height\n        image.height = maxHeight\n      }\n\n      context.clearRect(0, 0, canvas.width, canvas.height)\n      canvas.width = image.width\n      canvas.height = image.height\n\n      context.drawImage(image, 0, 0, image.width, image.height)\n\n      resolve(canvas.toDataURL('image/jpeg'))\n    }\n\n    image.src = imageURL\n  })\n\n/**\n * A custom <input> that dynamically reads and resizes image files before\n * submitting them to the server as data URLs. Also, shows a preview of the image\n */\nclass ImageInput extends React.Component {\n  static propTypes = {\n    className: PropTypes.string,\n    name: PropTypes.string,\n    maxHeight: PropTypes.number,\n  }\n\n  state = {\n    value: '',\n  }\n\n  handleFileChange = event => {\n    const file = event.target.files[0]\n\n    if (file && file.type.match(/^image\\//)) {\n      readFileAsDataURL(file).then(originalURL => {\n        resizeImage(originalURL, this.canvas, this.props.maxHeight).then(\n          url => {\n            this.setState({ value: url })\n          },\n        )\n      })\n    } else {\n      this.setState({ value: '' })\n    }\n  }\n\n  handleFormReset = () => {\n    this.setState({ value: '' })\n  }\n\n  componentDidMount() {\n    this.canvas = document.createElement('canvas')\n    this.fileInput.form.addEventListener('reset', this.handleFormReset)\n  }\n\n  componentWillUnmount() {\n    this.fileInput.form.removeEventListener('reset', this.handleFormReset)\n  }\n\n  render() {\n    const { className, name } = this.props\n    const { value } = this.state\n\n    const style = {\n      position: 'relative',\n    }\n\n    if (value) {\n      style.backgroundImage = `url(\"${value}\")`\n      style.backgroundRepeat = 'no-repeat'\n      style.backgroundPosition = 'center'\n      style.backgroundSize = 'cover'\n    }\n\n    return (\n      <div className={className} style={style}>\n        <input type=\"hidden\" name={name} value={value} />\n        <input\n          ref={node => (this.fileInput = node)}\n          type=\"file\"\n          onChange={this.handleFileChange}\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            opacity: 0,\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default ImageInput\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAUA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAtBA;AAwBA;;;;;;AAIA;;;;;;;;;;;;;;;;;;AAOA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAIA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;;;;AAzEA;AACA;AADA;AAEA;AACA;AACA;AAHA;AACA;AA0EA;;;;A","sourceRoot":""}