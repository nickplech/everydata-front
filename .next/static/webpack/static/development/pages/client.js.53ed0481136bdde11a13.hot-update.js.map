{"version":3,"file":"static/webpack/static/development/pages/client.js.53ed0481136bdde11a13.hot-update.js","sources":["webpack:///./components/SingleClient.js"],"sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { format } from 'date-fns'\nimport { Query } from 'react-apollo'\nimport SimpleBar from 'simplebar-react'\nimport gql from 'graphql-tag'\nimport Head from 'next/head'\nimport styled from 'styled-components'\nimport { SINGLE_CLIENT_QUERY } from './Clients'\n\nconst ALL_CLIENTS_REMINDERS = gql`\n  query ALL_CLIENTS_REMINDERS($client: ID!) {\n    textReminders(client: $client, orderBy: createdAt_ASC) {\n      id\n      text\n      createdAt\n      updatedAt\n      confirmationStatus\n      user {\n        id\n      }\n      client {\n        id\n      }\n    }\n  }\n`\n\nconst GridSub = styled.div`\n  display: grid;\n  grid-column: 2;\n  grid-row: 1;\n  background-color: white;\n  box-shadow: 0 0 5px 3px rgba(0, 0, 0, 0.05);\n  border: 5px solid white;\n  border-radius: 25px;\n  z-index: -1;\n  height: 100%;\n  width: 100%;\n  overscroll-behavior: contain;\n  overflow-y: scroll;\n  &:after {\n    width: calc(100% - 300px);\n    position: fixed;\n    display: flex;\n    margin: 0 auto;\n    content: 'Appointment Reminder Log';\n    justify-content: center;\n    border-bottom: 2px solid grey;\n    line-height: 28px;\n    color: white;\n    border-radius: 20px 20px 0 0;\n    padding: 2px 10px;\n    background: #3d5866;\n  }\n  [data-simplebar] {\n    position: relative;\n    flex-direction: column;\n    flex-wrap: wrap;\n    justify-content: flex-start;\n    align-content: flex-start;\n    align-items: flex-start;\n    width: inherit;\n    height: inherit;\n    max-width: inherit;\n    max-height: inherit;\n  }\n\n  .simplebar-wrapper {\n    overflow: hidden;\n    width: inherit;\n    height: inherit;\n    max-width: inherit;\n    max-height: inherit;\n  }\n\n  .simplebar-mask {\n    direction: inherit;\n    position: absolute;\n    overflow: hidden;\n    padding: 0;\n    margin: 0;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    width: auto !important;\n    height: auto !important;\n    z-index: 0;\n  }\n\n  .simplebar-offset {\n    direction: inherit !important;\n    box-sizing: inherit !important;\n    resize: none !important;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    padding: 0;\n    margin: 0;\n    -webkit-overflow-scrolling: touch;\n  }\n\n  .simplebar-content {\n    direction: inherit;\n    box-sizing: border-box !important;\n    position: relative;\n    display: block;\n    height: 100%; /* Required for horizontal native scrollbar to not appear if parent is taller than natural height */\n    width: auto;\n    visibility: visible;\n    overflow: scroll; /* Scroll on this element otherwise element can't have a padding applied properly */\n    max-width: 100%; /* Not required for horizontal scroll to trigger */\n    max-height: 100%; /* Needed for vertical scroll to trigger */\n  }\n\n  .simplebar-placeholder {\n    max-height: 100%;\n    max-width: 100%;\n    width: 100%;\n    pointer-events: none;\n  }\n\n  .simplebar-height-auto-observer-wrapper {\n    box-sizing: inherit !important;\n    height: 100%;\n    width: inherit;\n    max-width: 1px;\n    position: relative;\n    float: left;\n    max-height: 1px;\n    overflow: hidden;\n    z-index: -1;\n    padding: 0;\n    margin: 0;\n    pointer-events: none;\n    flex-grow: inherit;\n    flex-shrink: 0;\n    flex-basis: 0;\n  }\n\n  .simplebar-height-auto-observer {\n    box-sizing: inherit;\n    display: block;\n    opacity: 0;\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 1000%;\n    width: 1000%;\n    min-height: 1px;\n    min-width: 1px;\n    overflow: hidden;\n    pointer-events: none;\n    z-index: -1;\n  }\n\n  .simplebar-track {\n    z-index: 1;\n    position: absolute;\n    right: 0;\n    bottom: 0;\n    pointer-events: none;\n  }\n\n  [data-simplebar].simplebar-dragging .simplebar-track {\n    pointer-events: all;\n  }\n\n  .simplebar-scrollbar {\n    position: absolute;\n    right: 2px;\n    width: 7px;\n    min-height: 10px;\n  }\n\n  .simplebar-scrollbar:before {\n    position: absolute;\n    content: '';\n    background: black;\n    border-radius: 7px;\n    left: 0;\n    right: 0;\n    opacity: 0;\n    transition: opacity 0.2s linear;\n  }\n\n  .simplebar-track .simplebar-scrollbar.simplebar-visible:before {\n    /* When hovered, remove all transitions from drag handle */\n    opacity: 0.5;\n    transition: opacity 0s linear;\n  }\n\n  .simplebar-track.simplebar-vertical {\n    top: 0;\n    width: 11px;\n  }\n\n  .simplebar-track.simplebar-vertical .simplebar-scrollbar:before {\n    top: 2px;\n    bottom: 2px;\n  }\n\n  .simplebar-track.simplebar-horizontal {\n    left: 0;\n    height: 11px;\n  }\n\n  .simplebar-track.simplebar-horizontal .simplebar-scrollbar:before {\n    height: 100%;\n    left: 2px;\n    right: 2px;\n  }\n\n  .simplebar-track.simplebar-horizontal .simplebar-scrollbar {\n    right: auto;\n    left: 0;\n    top: 2px;\n    height: 7px;\n    min-height: 0;\n    min-width: 10px;\n    width: auto;\n  }\n\n  /* Rtl support */\n  [data-simplebar-direction='rtl'] .simplebar-track.simplebar-vertical {\n    right: auto;\n    left: 0;\n  }\n\n  .hs-dummy-scrollbar-size {\n    direction: rtl;\n    position: fixed;\n    opacity: 0;\n    visibility: hidden;\n    height: 500px;\n    width: 500px;\n    overflow-y: hidden;\n    overflow-x: scroll;\n  }\n`\n\nconst Lister = styled.div`\n  position: relative;\n  display: flex;\n  flex-flow: column;\n  box-sizing: border-box;\n  padding-left: 6px;\n  background: white;\n`\nconst TextChunk = styled.div`\n  display: flex;\n  align-content: center;\n  margin: 0px 30px;\n  padding: 0px;\n  border-top: 1.5px solid rgba(220, 220, 220, 0.4);\n  &:first-child {\n    margin-top: 30px;\n    border-top: none;\n  }\n\n  .message-text {\n    align-self: center;\n    background: rgba(220, 220, 220, 0.8);\n    font-family: 'Montserrat', sans-serif;\n    color: black;\n    display: inline-flex;\n    font-size: 12px;\n    padding: 10px 14px;\n    margin: 30px 0;\n    border-radius: 10px;\n    width: 40%;\n    height: 80%;\n    max-width: 600px;\n\n    @media (min-width: 1200px) {\n      font-size: 13px;\n    }\n  }\n  .confirmationStatus {\n    display: inline-flex;\n    justify-content: center;\n    flex-direction: column;\n    margin-left: 10%;\n  }\n`\nconst Nothing = styled.h2`\n  display: block;\n  font-size: 20px;\n  margin-top: 150px;\n  opacity: 0.5;\n  text-align: center;\n`\nconst P = styled.p`\n  font-size: 10px;\n  opacity: 0.7;\n  margin: 0;\n`\nconst PU = styled.p`\n  font-size: 10px;\n\n  margin: 0;\n  color: rgba(50, 50, 50, 0.6);\n`\nconst PG = styled.p`\n  font-size: 10px;\n\n  margin: 0;\n  color: rgba(10, 150, 10, 0.6);\n`\nconst PR = styled.p`\n  font-size: 10px;\n\n  margin: 0;\n  color: rgba(250, 50, 50, 0.6);\n`\nclass SingleClient extends Component {\n  constructor(props) {\n    super(props)\n    this.myRef = React.createRef()\n  }\n\n  componentDidMount() {\n    this.scrollToBottom()\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom()\n  }\n  scrollToBottom = () => {\n    this.myRef.current.scrollIntoView()\n  }\n\n  render() {\n    return (\n      <GridSub>\n        <Query\n          query={SINGLE_CLIENT_QUERY}\n          variables={{\n            id: this.props.id,\n          }}\n        >\n          {({ data, error, loading }) => {\n            if (loading) return <p>Loading...</p>\n            if (error) return <Error error={error} />\n            if (!data.client) return <p>No Client Found for {this.props.id}</p>\n            const client = data.client\n            return (\n              <Query\n                query={ALL_CLIENTS_REMINDERS}\n                variables={{ client: this.props.id }}\n              >\n                {({ data }) => {\n                  if (data.textReminders.length < 1)\n                    return (\n                      <Nothing>\n                        You Haven't Sent {client.firstName} Any Reminders Yet\n                      </Nothing>\n                    )\n                  return (\n                    <Fragment>\n                      <Head>\n                        <title>\n                          Client | {client.firstName} {client.lastName}\n                        </title>\n                      </Head>\n                      <SimpleBar style={{ height: '100%' }}>\n                        <Lister>\n                          {data.textReminders.map(message => {\n                            return (\n                              <TextChunk key={message.id}>\n                                <div className=\"message-text\">\n                                  {message.text}\n                                </div>\n                                <div className=\"confirmationStatus\">\n                                  {message.confirmationStatus ===\n                                    'UNCONFIRMED' && (\n                                    <PU>{message.confirmationStatus}</PU>\n                                  )}\n                                  {message.confirmationStatus ===\n                                    'CONFIRMED' && (\n                                    <PG>{message.confirmationStatus}</PG>\n                                  )}\n                                  {message.confirmationStatus ===\n                                    'CANCELED' && (\n                                    <PR>{message.confirmationStatus}</PR>\n                                  )}\n                                  {message.updatedAt !== message.createdAt && (\n                                    <P>\n                                      on{' '}\n                                      {format(\n                                        message.updatedAt,\n                                        'MMMM Do, YYYY h:mm a',\n                                      )}\n                                    </P>\n                                  )}\n                                  <P>\n                                    Sent:{' '}\n                                    {format(\n                                      message.createdAt,\n                                      'MMMM Do, YYYY h:mm a',\n                                    )}\n                                  </P>\n                                </div>\n                              </TextChunk>\n                            )\n                          })}\n                        </Lister>\n                      </SimpleBar>\n                    </Fragment>\n                  )\n                }}\n              </Query>\n            )\n          }}\n        </Query>\n        <div\n          style={{\n            float: 'left',\n            clear: 'both',\n          }}\n          ref={this.myRef}\n        />\n      </GridSub>\n    )\n  }\n}\n\nexport default SingleClient\nexport { SINGLE_CLIENT_QUERY, ALL_CLIENTS_REMINDERS }\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAkBA;AAAA;AAAA;AAAA;AAwNA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAoCA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAKA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAaA;AACA;AACA;AAbA;AAFA;AAGA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AADA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAKA;AAGA;AAGA;AACA;AACA;AAFA;AAIA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;;AA7GA;AACA;AA+GA;;;;;A","sourceRoot":""}