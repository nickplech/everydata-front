{"version":3,"file":"static/webpack/static/development/pages/_app.js.5b6f5cde09d7b96daabe.hot-update.js","sources":["webpack:///./components/ReviewMessage.js"],"sourcesContent":["import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport gql from 'graphql-tag'\nimport { Query, Mutation } from 'react-apollo'\nimport DaySelector from './DaySelector'\nimport { format, addDays } from 'date-fns'\nimport Timer from './TimePicker'\nimport Submitted from './Submitted'\nimport { ALL_CLIENTS_REMINDERS } from './SingleClient'\nimport User from './User'\n\nconst SEND_TEXT_MUTATION = gql`\n  mutation SEND_TEXT_MUTATION(\n    $to: String!\n    $text: String!\n    $client: ID!\n    $user: ID!\n    $confirmationStatus: String!\n  ) {\n    createTextReminder(\n      to: $to\n      text: $text\n      client: $client\n      user: $user\n      confirmationStatus: $confirmationStatus\n    ) {\n      id\n      text\n      user {\n        id\n      }\n      client {\n        id\n      }\n    }\n  }\n`\n\nconst TEXT_TEMPLATES_QUERY = gql`\n  query TEXT_TEMPLATES_QUERY($id: ID!) {\n    textTemplate(id: $id) {\n      id\n      name\n      content\n    }\n  }\n`\n\nconst Back = styled.form`\n  display: grid;\n  grid-template-columns: 300px 1fr;\n  grid-template-rows: 70px 1fr;\n  align-items: flex-end;\n  width: 100%;\n  height: 100%;\n  padding: 20px 20px;\n  z-index: 5;\n  border-radius: 20px;\n  border: 5px solid white;\n  box-shadow: 1px 0 4px 2px rgba(0, 0, 0, 0.1);\n  background-color: rgba(240, 240, 240, 1);\n`\n\n// const CharCount = styled.div`\n//   display: block;\n//   font-size: 11px;\n//   bottom: 70px;\n//   right: 40px;\n//   position: absolute;\n//   z-index: 10px;\n// `\n\nconst Message = styled.textarea`\n  grid-column: 2;\n  grid-row: 2;\n  position: relative;\n  z-index: 6;\n  margin: 0 10px;\n  width: 80%;\n  padding: 10px;\n  height: 100%;\n  max-height: 138px;\n  border-radius: 10px;\n  font-size: 1.5rem;\n  resize: none;\n  border: none;\n  background: rgba(250, 250, 250, 1);\n  box-shadow: 0 0 4px 3px rgba(0, 0, 0, 0.05);\n  &:focus {\n    outline: none;\n  }\n`\n\nconst Error = styled.div`\n  display: block;\n  position: absolute;\n  min-width: 300px;\n  width: 30%;\n  text-align: center;\n  padding: 10px;\n  background: rgba(180, 110, 20, 0.9);\n  color: white;\n  border-radius: 5px;\n  bottom: 15px;\n  box-shadow: 0 16px 24px 2px rgba(0, 0, 0, 0.1),\n    0 6px 10px 5px rgba(0, 0, 0, 0.1), 0 8px 10px -5px rgba(0, 0, 0, 0.2);\n  right: 20px;\n  z-index: 999;\n`\nconst Send = styled.button`\n  background: rgba(30, 110, 240, 1);\n  color: white;\n  font-weight: 800;\n  border: none;\n  width: 75px;\n  font-size: 2rem;\n  grid-column: 2;\n  grid-row: 2;\n  justify-self: flex-end;\n  height: 75px;\n  font-size: 1.8rem;\n  border-radius: 50%;\n  outline: none;\n  cursor: pointer;\n  transition: 0.1s;\n  box-shadow: 0 0 5px 3px rgba(0, 0, 0, 0.1);\n  &:active {\n    box-shadow: none;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n  }\n  &:hover {\n    transform: scale(1.1);\n  }\n`\n\nclass ReviewMessage extends Component {\n  state = {\n    time: '8:00 am',\n    date: addDays(new Date(), 3),\n    text: 'Hello',\n    message: 'Appointment Reminder Sent',\n  }\n\n  handleDate = e => {\n    this.setState({ date: e.target.value })\n  }\n  handleText = e => {\n    this.setState({ text: e.target.value })\n  }\n\n  render() {\n    const time = this.state.time\n    const date = format(this.state.date, 'ddd, MMM Do')\n    const text = this.state.text\n    const to = this.props.cellPhone.toString()\n    return (\n      <User>\n        {({ data: { me } }) => {\n          const business = me.businessName.toString()\n          const phone = me.cellPhone.toString()\n          return (\n            <Query\n              query={TEXT_TEMPLATES_QUERY}\n              variables={{ id: 'cjtdj1u818f3m0b51mos9b43o' }}\n            >\n              {({ data }) => {\n                const defaultTemplate = data.textTemplates[0].content\n                  .replace('<business>', business)\n                  .replace('<phone>', phone)\n                  .replace('<time>', time)\n                  .replace('<date>', date)\n                return (\n                  <Mutation\n                    mutation={SEND_TEXT_MUTATION}\n                    variables={{\n                      to: to,\n                      text: text,\n                      client: this.props.id,\n                      user: me.id,\n                      confirmationStatus: 'UNCONFIRMED',\n                    }}\n                    refetchQueries={[\n                      {\n                        query: ALL_CLIENTS_REMINDERS,\n                        variables: { client: this.props.id },\n                      },\n                    ]}\n                  >\n                    {(createTextReminder, { error, loading, called }) => {\n                      return (\n                        <Back\n                          onSubmit={async e => {\n                            e.preventDefault()\n                            const res = await createTextReminder()\n\n                            console.log(res)\n                          }}\n                        >\n                          {error && (\n                            <Error>\n                              Appointment Reminder Failed to Send. Please Try\n                              Again Shortly\n                            </Error>\n                          )}\n                          {!error && !loading && called && (\n                            <Submitted message={this.state.message} />\n                          )}\n\n                          <>\n                            <DaySelector handleDate={this.handleDate} />\n                            {/* <Timer /> */}\n\n                            <Message\n                              readOnly\n                              name=\"text\"\n                              value={defaultTemplate}\n                              onChange={this.handleText}\n                            />\n\n                            <Send type=\"submit\">Send</Send>\n                          </>\n                        </Back>\n                      )\n                    }}\n                  </Mutation>\n                )\n              }}\n            </Query>\n          )\n        }}\n      </User>\n    )\n  }\n}\nexport default ReviewMessage\nexport { TEXT_TEMPLATES_QUERY, SEND_TEXT_MUTATION }\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AA2BA;AAUA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AAAA;AACA;AA4BA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AACA;AAAA;AAAA;AAFA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAEA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAGA;AAGA;AAGA;;;;AAjGA;AACA;AAkGA;;;;;A","sourceRoot":""}