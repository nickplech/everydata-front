{"version":3,"file":"static/webpack/static/development/pages/client.js.97cf3870346bef3d660c.hot-update.js","sources":["webpack:///./components/ReviewMessage.js"],"sourcesContent":["import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport gql from 'graphql-tag'\nimport { Query, Mutation } from 'react-apollo'\nimport DaySelector from './DaySelector'\nimport { format, setHours } from 'date-fns'\nimport Timer from './Timer'\nimport Submitted from './Submitted'\nimport { SINGLE_CLIENT_QUERY } from './Clients'\nimport { ALL_CLIENTS_REMINDERS } from './SingleClient'\nimport User from './User'\nimport Error from './ErrorMessage'\nimport { ALL_CARTITEMS_QUERY } from './Slider'\n\nconst SEND_TEXT_MUTATION = gql`\n  mutation SEND_TEXT_MUTATION(\n    $to: String!\n    $text: String!\n    $client: ID!\n    $confirmationStatus: String!\n    $forDate: String!\n  ) {\n    createTextReminder(\n      to: $to\n      text: $text\n      client: $client\n      confirmationStatus: $confirmationStatus\n      forDate: $forDate\n    ) {\n      confirmationStatus\n      id\n      text\n      forDate\n      user {\n        id\n      }\n      client {\n        id\n      }\n    }\n  }\n`\n\nconst TEXT_TEMPLATES_QUERY = gql`\n  query TEXT_TEMPLATES_QUERY {\n    textTemplates {\n      id\n      name\n      content\n    }\n  }\n`\n\nconst Form = styled.form`\n  display: grid;\n  grid-template-columns: 280px 10px 1fr 100px;\n  grid-template-rows: 70px 1fr;\n  align-items: flex-end;\n  width: 100%;\n  height: 100%;\n  padding: 20px 20px;\n  z-index: 5;\n  border-radius: 20px;\n  border: 5px solid white;\n  box-shadow: 1px 0 4px 2px rgba(0, 0, 0, 0.1);\n  background-color: rgba(240, 240, 240, 1);\n`\n\nconst CharCount = styled.p`\n  font-size: 11px;\n  grid-column: 3;\n  grid-row: 2;\n  justify-self: flex-end;\n  margin: 2px 0;\n  z-index: 100;\n`\n\nconst Message = styled.textarea`\n  grid-column: 3;\n  grid-row: 2;\n  position: relative;\n  z-index: 6;\n  margin: 0 10px;\n  font-family: 'Montserrat', sans-serif;\n  color: rgba(20, 20, 20, 0.7);\n  width: 100%;\n  min-width: 250px;\n  padding: 10px;\n  height: 100%;\n  line-height: 22px;\n  max-height: 140px;\n  border-radius: 10px;\n  font-size: 1.5rem;\n  resize: none;\n  border: none;\n  background: rgba(250, 250, 250, 1);\n  box-shadow: 0 0 4px 3px rgba(0, 0, 0, 0.05);\n  &:focus {\n    outline: none;\n  }\n`\n\nconst Send = styled.button`\n  background: rgba(30, 110, 240, 1);\n  color: white;\n  font-weight: 800;\n  border: none;\n  width: 75px;\n  font-size: 2rem;\n  grid-column: 4;\n  grid-row: 2;\n  justify-self: flex-end;\n  height: 35px;\n  font-size: 1.8rem;\n  border-radius: 5px;\n  outline: none;\n  cursor: pointer;\n  transition: 0.1s;\n  box-shadow: 0 0 5px 3px rgba(0, 0, 0, 0.1);\n  &:active {\n    box-shadow: none;\n  }\n\n  &[disabled] {\n    opacity: 0.5;\n  }\n  &:hover {\n    transform: scale(1.1);\n  }\n`\n\nconst MessageBody = props => (\n  <User>\n    {({ data: { me } }) => {\n      const business = me.businessName.toString()\n      const phone = me.cellPhone.toString()\n      return (\n        <Query query={SINGLE_CLIENT_QUERY} variables={{ id: props.id }}>\n          {({ loading, error, data: { client } }) => {\n            if (loading) return <p>Loading...</p>\n            if (error) return <Error error={error} />\n            if (!client) return null\n            return (\n              <Query query={TEXT_TEMPLATES_QUERY}>\n                {({ data }) => {\n                  const seed = data.textTemplates[0].content\n                    .replace('<business>', business)\n                    .replace('<phone>', phone)\n                  return (\n                    <ReviewMessage\n                      client={client.id}\n                      seededMessage={seed}\n                      cellPhone={client.cellPhone}\n                    />\n                  )\n                }}\n              </Query>\n            )\n          }}\n        </Query>\n      )\n    }}\n  </User>\n)\n\nclass ReviewMessage extends Component {\n  state = {\n    time: '',\n    text: this.props.seededMessage,\n    date: '',\n  }\n\n  saveToState = e => {\n    const { value } = e.target\n    this.setState({ date: value })\n    const date = format(value, 'ddd, MMM Do')\n    const time = this.state.time.length > 0 ? this.state.time : '<time>'\n    let str = this.props.seededMessage\n\n    const mapObj = {\n      '<date>': `${date}`,\n      '<time>': `${time}`,\n    }\n    const re = new RegExp(Object.keys(mapObj).join('|'), 'gi')\n    str = str.replace(re, function(matched) {\n      return mapObj[matched]\n    })\n    this.setState({ text: str })\n  }\n\n  saveTime = e => {\n    const { name } = e.target\n    this.setState({ time: name })\n    const date =\n      this.state.date.length > 7\n        ? format(this.state.date, 'ddd, MMM Do')\n        : '<date>'\n    let str = this.props.seededMessage\n    let time = name\n    const mapObj = {\n      '<date>': `${date}`,\n      '<time>': `${time}`,\n    }\n    const re = new RegExp(Object.keys(mapObj).join('|'), 'gi')\n    str = str.replace(re, function(matched) {\n      return mapObj[matched]\n    })\n    this.setState({ text: str })\n  }\n\n  saveTimeMin = e => {\n    const { value } = e.target\n\n    if (this.state.time.includes(15)) {\n      minutes = '15'\n    } else if (this.state.time.includes(30)) {\n      minutes = '30'\n    } else if (this.state.time.includes(45)) {\n      minutes = '45'\n    } else {\n      minutes = '00'\n    }\n\n    let built = this.state.time.replace(minutes, `${value}`)\n    this.setState({ time: built })\n\n    const date =\n      this.state.date.length > 7\n        ? format(this.state.date, 'ddd, MMM Do')\n        : '<date>'\n\n    let str = this.props.seededMessage\n\n    const mapObj = {\n      '<date>': `${date}`,\n      '<time>': `${built}`,\n    }\n    const re = new RegExp(Object.keys(mapObj).join('|'), 'gi')\n    str = str.replace(re, function(matched) {\n      return mapObj[matched]\n    })\n    this.setState({ text: str })\n  }\n\n  render() {\n    const tooLong = this.state.text.length > 159\n    const needsDate = this.state.date.length < 2\n    const needsTime = this.state.time.length < 1\n\n    return (\n      <Mutation\n        mutation={SEND_TEXT_MUTATION}\n        variables={{\n          to: this.props.cellPhone.toString(),\n          text: this.state.text,\n          client: this.props.client,\n          confirmationStatus: 'UNCONFIRMED',\n          forDate: this.state.date,\n        }}\n        refetchQueries={[\n          {\n            query: ALL_CLIENTS_REMINDERS,\n            variables: { client: this.props.client },\n          },\n          {\n            query: ALL_CARTITEMS_QUERY,\n          },\n        ]}\n      >\n        {(createTextReminder, { error, loading, called }) => {\n          // if (loading) return <p>Loading...</p>\n          if (error) return <Error error={error} />\n\n          return (\n            <Form\n              onSubmit={async e => {\n                e.preventDefault()\n                const res = await createTextReminder()\n                console.log(res)\n              }}\n            >\n              {!loading && !error && called && <Submitted />}\n\n              <>\n                <Timer\n                  saveTime={this.saveTime}\n                  time={this.state.time}\n                  saveTimeMin={this.saveTimeMin}\n                />\n                <DaySelector saveToState={this.saveToState} />\n\n                <Message\n                  readOnly\n                  name=\"text\"\n                  value={this.state.text}\n                  onChange={this.saveToState}\n                />\n                <CharCount>{this.state.text.length} of 160</CharCount>\n\n                <Send\n                  disabled={loading || tooLong || needsDate || needsTime}\n                  aria-busy={loading}\n                  type=\"submit\"\n                >\n                  Send\n                </Send>\n              </>\n            </Form>\n          )\n        }}\n      </Mutation>\n    )\n  }\n}\nexport default MessageBody\nexport { TEXT_TEMPLATES_QUERY, SEND_TEXT_MUTATION }\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AA6BA;AAUA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAyBA;AAAA;AAAA;AAAA;AACA;AA4BA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAGA;AAGA;AA9BA;AACA;AAiCA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AACA;AAAA;AAAA;AAFA;AAKA;AADA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAGA;;;;AAnJA;AACA;AAoJA;;;;;A","sourceRoot":""}