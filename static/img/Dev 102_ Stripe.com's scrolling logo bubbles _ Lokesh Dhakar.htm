<!DOCTYPE html>
<!-- saved from url=(0068)https://lokeshdhakar.com/dev-102-stripe.coms-scrolling-logo-bubbles/ -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <title>Dev 102: Stripe.com's scrolling logo bubbles | Lokesh Dhakar</title>
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <!-- <link rel="apple-touch-icon" href="icon.png">-->
    <!-- Place favicon.ico in the root directory -->

    <link rel="stylesheet" href="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/main.css">

    
  </head>
  <body>

    <nav class="nav">
      <div class="nav__list">
        <a href="https://lokeshdhakar.com/" class="nav__item">Home</a>
        <a href="https://lokeshdhakar.com/blog/" class="nav__item">Blog</a>
        <a href="https://lokeshdhakar.com/notes/" class="nav__item">Notes</a>
        <a href="https://lokeshdhakar.com/running/" class="nav__item">Running</a>
        <a href="https://lokeshdhakar.com/inspiration/" class="nav__item">Inspiration</a>
      </div>
      <div class="nav__list">
        <a href="https://twitter.com/lokesh" class="nav__item" target="_blank">Twitter</a>
        <a href="https://lokeshdhakar.com/dev-102-stripe.coms-scrolling-logo-bubbles/#" class="nav__item js-email-link">Email</a>
      </div>
    </nav>

    
  <article class="post">
    <header>
      <h1 class="post__title">Dev 102: Stripe.com's scrolling logo bubbles</h1>
    </header>
    <main class="post__content">
      <div class="post-summary">
  <span class="post-time">7 min read</span>
  Learn about CSS spritesheets and perlin noise.
</div>

<div class="figure figure__video">
    <video style="width: 100%; max-width: 720px" autoplay="" loop="" muted="" playsinline="">
        <source src="/media/posts/dev/102/logo-bubbles.mp4" type="video/mp4">
    </video>
</div>

<p><a href="https://lokeshdhakar.com/dev-102-stripe.coms-scrolling-logo-bubbles/#final-example">↓ Skip to the finished result</a></p>
<p>Welcome! This is the second article in the <em>Dev</em> series, where I attempt to explain and recreate interesting front-end dev techiniques I run across on the web.</p>
<p>We're going back to Stripe.com again for this article. But this time we'll do something with motion. Let's see if we can recreate the logo bubbles (see movie above) from the <a href="https://stripe.com/us/customers">Stripe Customers page</a>.</p>
<p>At-a-glance we can see a few interesting challenges:</p>
<ol>
<li>Randomly generating and placing the bubbles on page load</li>
<li>Animating the smooth up and down movement</li>
<li>Looping the animation infinitely</li>
</ol>
<p>Our strategy for this will be to work on the atomic elements (the bubbles), then on placing them, and finally animating them.</p>
<h2 id="part-1-creating-the-bubble">Part 1: Creating the bubble</h2>
<h3 id="set-up-an-empty-bubble">Set up an empty bubble</h3>
<p>Create an element with equal width and height, and then turn this square into a circle by setting <code>border-radius: 50%</code>. If you want to nerd out about how exactly a border-radius value affects a shape, check out this <a href="https://stackoverflow.com/a/29966500/400407">Stackoverflow answer</a>.</p>
<p></p><div class="cp_embed_wrapper"><iframe name="cp_embed_1" src="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/WLKEJP(1).html" scrolling="no" frameborder="0" height="270" allowtransparency="true" allowfullscreen="true" allowpaymentrequest="true" title="Stripe - Logo Bubble 1.0" class="cp_embed_iframe " style="width: 100%; overflow:hidden; display:block;" id="cp_embed_WLKEJP"></iframe></div><p></p>
<script type="text/javascript" async="" src="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/analytics.js"></script><script async="" src="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/ei.js"></script>

<h3 id="add-the-logo">Add the logo</h3>
<p>Stripe combines all the logos into a single image file, which is called a spritesheet. You can see it here:</p>
<div class="figure max-width">
  <img src="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/logo-spritesheet.png" alt="A grid of company logos.">
</div>

<p>Using a spritesheet is a handy technique to reduce the number of HTTP requests the browser has to make. In this case, 1 file vs 43 files, a big performance win.</p>
<p>Now back to our code… we'll take the logo spritesheet and set it as the background for each of the bubbles. We'll then adjust the size of the spritesheet with the <code>background-size</code> CSS property so that one logo in the image is the size of one bubble.</p>
<div class="code-toolbar"><pre class=" line-numbers language-css"><code class="prism  language-css"><span class="token selector">.bubble</span> <span class="token punctuation">{</span>
  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(stripe-logo-bubbles-spritesheet.png)</span><span class="token punctuation">;</span>
  <span class="token property">background-size</span><span class="token punctuation">:</span> 1076px 1076px<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div></div>

<p> And then we can use the <code>background-position</code> property to shift the image's position in each bubble and reveal different logos.</p>
<div class="code-toolbar"><pre class=" line-numbers language-css"><code class="prism  language-css"><span class="token selector">.logo1</span> <span class="token punctuation">{</span>
  <span class="token property">background-position</span><span class="token punctuation">:</span> 0 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.logo2</span> <span class="token punctuation">{</span>
  <span class="token property">background-position</span><span class="token punctuation">:</span> 0 -154px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.logo3</span> <span class="token punctuation">{</span>
  <span class="token property">background-position</span><span class="token punctuation">:</span> 0 -308px<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="toolbar"><div class="toolbar-item"><span>CSS</span></div></div></div>

<p></p><div class="cp_embed_wrapper"><iframe name="cp_embed_2" src="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/Ydjrad.html" scrolling="no" frameborder="0" height="300" allowtransparency="true" allowfullscreen="true" allowpaymentrequest="true" title="Stripe - Logo Bubble 1.1 - Add logos" class="cp_embed_iframe " style="width: 100%; overflow:hidden; display:block;" id="cp_embed_Ydjrad"></iframe></div><p></p>
<script async="" src="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/ei.js"></script>

<p>We'll create the rest of the bubbles in the next section, and we'll do it dynamically with Javascript.</p>
<h2 id="part-2-placing-and-sizing-the-bubbles">Part 2: Placing and sizing the bubbles</h2>
<p>To better understand the placement and sizing logic used, let's take a bird's eye view of the entire header. To do this, open your browser's dev tools and apply <code>transform: scale(0.2)</code> to the header area. This is what we see:</p>
<div class="figure">
  <img src="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/logo-bubbles-panoramic.png" alt="A wide image of company logos in circles.">
</div>

<p>There isn't a quickly discernable pattern. But one thing we notice is that the general placement and sizing of the bubbles is the same on every page load, it's just the logos that are randomized.</p>
<p>Let's peek at the original code to see if we can get to the bottom of this:</p>
<div class="figure max-width">
  <img src="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/bubbles-array.gif" alt="A wide image of company logos in circles.">
</div>

<p>Found it! The positions and sizes are hard coded. Let's copy and paste the values in our code and use it to generate all the bubbles on the fly. We won't worry about randomizing the logos for this exercise.</p>
<div class="code-toolbar"><pre class=" line-numbers language-js"><code class="prism  language-js"><span class="token keyword">const</span> bubbles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
  s<span class="token punctuation">:</span> <span class="token number">.6</span><span class="token punctuation">,</span>
  x<span class="token punctuation">:</span> <span class="token number">1134</span><span class="token punctuation">,</span>
  y<span class="token punctuation">:</span> <span class="token number">45</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  s<span class="token punctuation">:</span> <span class="token number">.6</span><span class="token punctuation">,</span>
  x<span class="token punctuation">:</span> <span class="token number">1620</span><span class="token punctuation">,</span>
  y<span class="token punctuation">:</span> <span class="token number">271</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

bubbles<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">bubble<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  el<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token template-string"><span class="token string">`bubble logo</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>
  el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token string">`translate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>bubble<span class="token punctuation">.</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>bubble<span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px) scale(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>bubble<span class="token punctuation">.</span>s<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">;</span>

  bubblesEl<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="toolbar"><div class="toolbar-item"><span>Js</span></div></div></div>

<p></p><div class="cp_embed_wrapper"><iframe name="cp_embed_3" src="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/gZQJBz.html" scrolling="no" frameborder="0" height="640" allowtransparency="true" allowfullscreen="true" allowpaymentrequest="true" title="Stripe - Logo Bubble 1.2 - Place and size logos" class="cp_embed_iframe " style="width: 100%; overflow:hidden; display:block;" id="cp_embed_gZQJBz"></iframe></div><p></p>
<script async="" src="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/ei.js"></script>


<h2 id="part-3-animating-and-looping">Part 3: Animating and looping</h2>
<h3 id="structuring-our-code">Structuring our code</h3>
<p>Before we start animating, let's add some structure to our code so we can support new features and keep things tidy. We'll create two new classes: <code>Bubbles</code> and <code>Bubble</code>.</p>
<div class="code-toolbar"><pre class=" line-numbers language-js"><code class="prism  language-js"><span class="token keyword">class</span> <span class="token class-name">Bubbles</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment">// For creating the individual bubbles.</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>      <span class="token comment">// Will be called every frame.</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Bubble</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>      <span class="token comment">// Will be called every frame. Updates the bubble positionn.</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="toolbar"><div class="toolbar-item"><span>Js</span></div></div></div>

<h3 id="adding-scrolling-and-keeping-it-performant-">Adding scrolling (and keeping it performant)</h3>
<ol>
<li><p><strong>Use transforms</strong></p>
<p>There are two layout related properties that browsers can animate cheaply, thanks to support from the GPU, and these are: <code>opacity</code> and <code>transform</code>. It is tempting to use the <code>top</code> and <code>left</code> CSS values to move elements around, but modifying them triggers expensive layout calculations that can cause slowdown, so stick to <code>transform</code> and <code>opacity</code>. In our case, we'll use transforms to move the bubbles around.</p>
<p>If you'd like to learn more about creating performant animations, check out this classic <a href="https://www.html5rocks.com/en/tutorials/speed/high-performance-animations/">HTML5 Rocks article</a>.</p>
</li>
</ol>
<div class="code-toolbar"><pre class=" line-numbers language-js"><code class="prism  language-js"><span class="token keyword">const</span> <span class="token constant">SCROLL_SPEED</span> <span class="token operator">=</span> <span class="token number">0.3</span><span class="token punctuation">;</span> <span class="token comment">// Pixels to move per frame. At 60fps, this would be 18px a sec.</span>

<span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token constant">SCROLL_SPEED</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">&lt;</span>  <span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token constant">CANVAS_WIDTH</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token string">`translate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px)`</span></span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="toolbar"><div class="toolbar-item"><span>Js</span></div></div></div>

<ol start="2">
<li><p><strong>Use requestAnimationFrame</strong></p>
<p>If you ever catch yourself using <code>setInterval</code> to build out an animation, stop what you're doing, and go read about <a href="https://flaviocopes.com/requestanimationframe/">requestAnimationFrame</a>.</p>
</li>
</ol>
<div class="code-toolbar"><pre class=" line-numbers language-js"><code class="prism  language-js"><span class="token keyword">class</span> <span class="token class-name">Bubbles</span> <span class="token punctuation">{</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Call each individual bubble's update method</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>bubbles<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">bubble</span> <span class="token operator">=&gt;</span> bubble<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Queue up another update() method call on the next frame</span>
    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="toolbar"><div class="toolbar-item"><span>Js</span></div></div></div>

<p></p><div class="cp_embed_wrapper"><iframe name="cp_embed_4" src="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/NeEZyP.html" scrolling="no" frameborder="0" height="640" allowtransparency="true" allowfullscreen="true" allowpaymentrequest="true" title="Stripe - Logo Bubble 1.3 - Animating and looping" class="cp_embed_iframe " style="width: 100%; overflow:hidden; display:block;" id="cp_embed_NeEZyP"></iframe></div><p></p>
<script async="" src="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/ei.js"></script>

<h3 id="making-the-animation-feel-organic">Making the animation feel organic</h3>
<p>We have movement, but it feels stale. How do we get that organic bobbing and weaving that the <a href="https://stripe.com/us/customers">Stripe page</a> has? We could create three or four predefined CSS animations and apply them with random delays to the bubbles. That world probably work, but there is a  more elegant solution... inject some noise, <em>perlin noise</em> to be specific.</p>
<p><strong>Perlin noise</strong> is an algorithm for generating 'randomness'. But unlike your normal <code>Math.random()</code> output which produces random values that have no relationship with the previously generated values, perlin noise allows us to create a sequence of 'random' values that have some order and create a smooth, organic appearance.</p>
<p>The easiest way to understand the difference is to plot the values out. In the diagram below, we plot the output of <code>Math.random()</code> on top and the output of <code>noise.simplex2()</code>, a 2d perlin noise function, on the bottom.</p>
<div class="figure" style="width: 100%">
  <canvas id="canvas-perlin" class="canvas" width="3284" height="800" style="width: 1642px; height: 400px;"></canvas>
  <figcaption>
    <button class="button" id="perlin-replay-btn">Generate new values</button>
  </figcaption>
</div>

<p><br>
Here is our Bubble class's <code>update()</code> method before:</p>
<div class="code-toolbar"><pre class=" line-numbers language-js"><code class="prism  language-js"><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token constant">SCROLL_SPEED</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">&lt;</span>  <span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token constant">CANVAS_WIDTH</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token string">`translate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px) scale(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="toolbar"><div class="toolbar-item"><span>Js</span></div></div></div>

<p>And here it is after introducing <em>perlin noise</em>:</p>
<div class="code-toolbar"><pre class=" line-numbers language-js"><code class="prism  language-js"><span class="token keyword">const</span> <span class="token constant">NOISE_SPEED</span> <span class="token operator">=</span> <span class="token number">0.004</span><span class="token punctuation">;</span> <span class="token comment">// The frequency. Smaller for flat slopes, higher for jagged spikes.</span>
<span class="token keyword">const</span> <span class="token constant">NOISE_AMOUNT</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment">// The amplitude. The amount the noise affects the movement.</span>

<span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>noiseSeedX <span class="token operator">+=</span> <span class="token constant">NOISE_SPEED</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>noiseSeedY <span class="token operator">+=</span> <span class="token constant">NOISE_SPEED</span><span class="token punctuation">;</span>

  <span class="token comment">// The noise library we're using: https://github.com/josephg/noisejs</span>
  <span class="token keyword">let</span> randomX <span class="token operator">=</span> noise<span class="token punctuation">.</span><span class="token function">simplex2</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>noiseSeedX<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> randomY <span class="token operator">=</span> noise<span class="token punctuation">.</span><span class="token function">simplex2</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>noiseSeedY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">-=</span> <span class="token constant">SCROLL_SPEED</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>xWithNoise <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token punctuation">(</span>randomX <span class="token operator">*</span> <span class="token constant">NOISE_AMOUNT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>yWithNoise <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token punctuation">(</span>randomY <span class="token operator">*</span> <span class="token constant">NOISE_AMOUNT</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">&lt;</span>  <span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token constant">CANVAS_WIDTH</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token string">`translate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>xWithNoise<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>yWithNoise<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px) scale(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="toolbar"><div class="toolbar-item"><span>Js</span></div></div></div>

<p>I'm keeping the perlin noise implementation discussion brief in this article, so if you have questions or want to learn more, I'd recommend checking out the <a href="https://natureofcode.com/book/introduction/">Introduction</a> from <em>The Nature of Code</em>.</p>
<p>With the perlin noise added and the noise parameters finetuned...</p>
<hr>
<h2 id="-logo-bubbles">🏁 Logo bubbles</h2>
<p><a id="final-example"></a></p>
<p></p><div class="cp_embed_wrapper"><iframe name="cp_embed_5" src="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/GPPKGQ.html" scrolling="no" frameborder="0" height="640" allowtransparency="true" allowfullscreen="true" allowpaymentrequest="true" title="Stripe - Logo Bubble 3.1 - Perlin noise" class="cp_embed_iframe " style="width: 100%; overflow:hidden; display:block;" id="cp_embed_GPPKGQ"></iframe></div><p></p>
<script async="" src="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/ei.js"></script>

<p>I hope you enjoyed this post and learned something new. If you did enjoy it, check out the <a href="https://lokeshdhakar.com/blog/">full listing of posts</a> for more from the <em>Dev</em> series.</p>
<p>And <a href="https://lokeshdhakar.com/dev-102-stripe.coms-scrolling-logo-bubbles/#" class="js-email-link">send me your thoughts</a> while they are fresh in your mind. What parts did you like? What parts were confusing? What would you like to learn about next?</p>
<p>And lastly, follow me on <a href="https://twitter.com/lokesh">Twitter</a> to find out when the next post is up.</p>
<p><link rel="stylesheet" href="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/stripe.css"></p>
<link rel="stylesheet" href="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/prism.css">

<script src="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/prism.min.js"></script>




<p><link rel="stylesheet" href="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/stripe.css"></p>
<link rel="stylesheet" href="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/prism.css">

<script src="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/prism.min.js"></script>
<script src="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/perlin.js"></script>

<script>

const canvas = document.getElementById('canvas-perlin');
const ctx = canvas.getContext('2d');

// Set display size (css pixels).
let width = canvas.parentElement.offsetWidth;
let height = 400;

// setInterval
let plotting;

function setupCanvas() {
  canvas.style.width = width + 'px';
  canvas.style.height = height + 'px';

  // Set actual size in memory (scaled to account for extra pixel density).
  let scale = window.devicePixelRatio; // <--- Change to 1 on retina screens to see blurry canvas.
  canvas.width = width * scale;
  canvas.height = height * scale;

  // Normalize coordinate system to use css pixels.
  ctx.scale(scale, scale);
}

function clearCanvas() {
  ctx.fillStyle = '#fff';
  ctx.fillRect(0, 0, canvas.width, canvas.height);
}

function startPlotting() {
  let x = 0;
  let noiseSpeed = 0.02;

  plotting = setInterval(() => {
    x += 4;

    /* Random noise */
    ctx.beginPath();
    ctx.arc(x, Math.random() * (height / 2),  2, 0, 2 * Math.PI, false)
    ctx.fillStyle = '#f96a38';
    ctx.fill();

    /* Perlin noise */
    let noisey = (noise.simplex2(noiseSeed, 0));
    noiseSeed += noiseSpeed;
    ctx.beginPath();
    ctx.arc(x, (noisey * (height / 4)) + (height * 0.75),  2, 0, 2 * Math.PI, false)
    ctx.fillStyle = '#f96a38';
    ctx.fill();

    if (x > canvas.width) {
      stopPlotting();
    }
  }, 50)
}

function stopPlotting() {
  clearInterval(plotting);
}

noise.seed(Math.floor(Math.random() * 64000));
let noiseSeed = 0;

setupCanvas();
clearCanvas();
startPlotting();

document.getElementById('perlin-replay-btn').addEventListener('click', () => {
  stopPlotting();
  clearCanvas();
  startPlotting();
})
</script>


<style>
figcaption {
  margin-top: 0.5rem;
}

.button {
  color: white;
  font-weight: var(--bold);
  background: var(--primary-color);
  padding: 0.5rem 0.75rem;
  border-radius: var(--border-radius);
  border: 0;
}
</style>

    </main>
  </article>




    <script src="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/activate-email-links.js"></script>

    <!-- Google Analytics -->
    <script async="" src="./Dev 102_ Stripe.com&#39;s scrolling logo bubbles _ Lokesh Dhakar_files/js"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'UA-2196019-1');
    </script>

    <script src="http://localhost:35729/livereload.js"></script>
  

</body></html>